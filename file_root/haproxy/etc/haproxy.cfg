
global
  log /dev/log local0
  maxconn 256
  user haproxy
  group haproxy
  daemon
  pidfile /var/run/haproxy/haproxy.pid
  tune.bufsize {{ salt['pillar.get']( 'haproxy:bufsize', 16384 ) }}
  # stats socket /var/run/haproxy/stats.sock mode 770 group haproxy

defaults
  log global
  mode http
  option httplog
  option dontlognull
  option redispatch
  option forwardfor
  option httpclose # needed for empty reponse body 204's
  timeout client 300s
  timeout server 300s
  timeout connect 1s
  timeout http-keep-alive 60s
  timeout http-request 30s

  stats enable
  stats refresh 10s
  stats uri /stats
  stats auth admin:{{ salt['pillar.get']( 'haproxy:admin_password' ) }}

{% for service, name, local_port, service_port, is_encrypt in salt['openstack_utils.haproxy_services']() %}
frontend {{ name }}
  {% if is_encrypt -%}
  # Require TLS with AES
  bind *:{{ service_port }} ssl crt {{ ssl_cert_path }} no-sslv3 ciphers AES128-SHA:AES256-SHA
  reqadd X-Forwarded-Proto:\ https
  reqadd X-Forwarded-Protocol:\ https
  {% else -%}
  bind *:{{ service_port }}
  {% endif -%}
  default_backend {{ name }}

backend {{ name }}
  {% if service == "horizon" -%}
  redirect scheme https if !{ ssl_fc }
  balance  source
  cookie  SERVERID insert indirect nocache
  {% elif service == "novnc" -%}
  option tcp-check /
  {% elif service == "ironic" -%}
  option httpchk GET /v1
  {% elif service == "ceilometer" -%}
  option tcp-check /
  {% elif service == "magnum" -%}
  # option httpchk /
  {% elif service == "glance" -%}
  option httpchk GET /versions
  {% else -%}
  option httpchk /
  {% endif -%}
  balance source
  {% for host in controllers -%}
  {% set host_ip = '127.0.0.1' -%}
  server {{ host }} {{ host_ip }}:{{ local_port }} check maxconn 40
  {% endfor %}

{% endfor %}