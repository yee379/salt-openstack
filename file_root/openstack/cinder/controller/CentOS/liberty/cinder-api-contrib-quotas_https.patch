--- untitled
+++ (clipboard)
@@ -57,6 +57,17 @@
 
 class QuotaSetsController(wsgi.Controller):
 
+    class GenericProjectInfo(object):
+
+        """Abstraction layer for Keystone V2 and V3 project objects"""
+
+        def __init__(self, project_id, project_keystone_api_version,
+                     project_parent_id=None, project_subtree=None):
+            self.id = project_id
+            self.keystone_api_version = project_keystone_api_version
+            self.parent_id = project_parent_id
+            self.subtree = project_subtree
+
     def _format_quota_set(self, project_id, quota_set):
         """Convert the quota object to a result dict."""
 
@@ -64,6 +75,21 @@
 
         return dict(quota_set=quota_set)
 
+    def _keystone_client(self, context):
+        """Creates and returns an instance of a generic keystone client.
+
+        :param context: The request context
+        :return: keystoneclient.client.Client object
+        """
+        auth_plugin = token.Token(
+            auth_url=CONF.keystone_authtoken.auth_uri,
+            token=context.auth_token,
+            project_id=context.project_id)
+        verify = not CONF.keystone_authtoken.insecure
+        client_session = session.Session(auth=auth_plugin, verify=verify)
+        return client.Client(auth_url=CONF.keystone_authtoken.auth_uri,
+                             session=client_session)
+
     def _validate_existing_resource(self, key, value, quota_values):
         if key == 'per_volume_gigabytes':
             return
@@ -82,7 +108,7 @@
             free_quota = (parent_project_quotas[key]['limit'] -
                           parent_project_quotas[key]['in_use'] -
                           parent_project_quotas[key]['reserved'] -
-                          parent_project_quotas[key]['allocated'])
+                          parent_project_quotas[key].get('allocated', 0))
 
             current = 0
             if project_quotas.get(key):
@@ -177,23 +203,23 @@
     def _get_project(self, context, id, subtree_as_ids=False):
         """A Helper method to get the project hierarchy.
 
-        Along with Hierachical Multitenancy, projects can be hierarchically
-        organized. Therefore, we need to know the project hierarchy, if any, in
-        order to do quota operations properly.
+        Along with Hierachical Multitenancy in keystone API v3, projects can be
+        hierarchically organized. Therefore, we need to know the project
+        hierarchy, if any, in order to do quota operations properly.
         """
         try:
-            auth_plugin = token.Token(
-                auth_url=CONF.keystone_authtoken.auth_uri,
-                token=context.auth_token,
-                project_id=context.project_id)
-            client_session = session.Session(auth=auth_plugin)
-            keystone = client.Client(auth_url=CONF.keystone_authtoken.auth_uri,
-                                     session=client_session)
-            project = keystone.projects.get(id, subtree_as_ids=subtree_as_ids)
+            keystone = self._keystone_client(context)
+            generic_project = self.GenericProjectInfo(id, keystone.version)
+            if keystone.version == 'v3':
+                project = keystone.projects.get(id,
+                                                subtree_as_ids=subtree_as_ids)
+                generic_project.parent_id = project.parent_id
+                generic_project.subtree = (
+                    project.subtree if subtree_as_ids else None)
         except exceptions.NotFound:
             msg = (_("Tenant ID: %s does not exist.") % id)
             raise webob.exc.HTTPNotFound(explanation=msg)
-        return project
+        return generic_project
 
     @wsgi.serializers(xml=QuotaTemplate)
     def show(self, req, id):
@@ -231,7 +257,7 @@
             # NOTE(e0ne): Keystone API v2 requires admin permissions for
             # project_get method. We ignore Forbidden exception for
             # non-admin users.
-            parent_project_id = target_project_id
+            parent_project_id = None
 
         try:
             sqlalchemy_api.authorize_project_context(context,
@@ -301,7 +327,7 @@
                                              target_project.id,
                                              parent_id)
             parent_project_quotas = QUOTAS.get_project_quotas(
-                context, parent_id, parent_project_id=parent_id)
+                context, parent_id)
 
         # NOTE(ankit): Pass #2 - In this loop for body['quota_set'].keys(),
         # we validate the quota limits to ensure that we can bail out if
@@ -323,8 +349,13 @@
                 value = self._validate_quota_limit(body['quota_set'], key,
                                                    quota_values,
                                                    parent_project_quotas)
+                original_quota = 0
+                if quota_values.get(key):
+                    original_quota = quota_values[key]['limit']
+
                 allocated_quotas[key] = (
-                    parent_project_quotas[key]['allocated'] + value)
+                    parent_project_quotas[key].get('allocated', 0) + value -
+                    original_quota)
             else:
                 value = self._validate_quota_limit(body['quota_set'], key)
             valid_quotas[key] = value
@@ -345,8 +376,13 @@
             # atomic operation.
             if parent_id:
                 if key in allocated_quotas.keys():
-                    db.quota_allocated_update(context, parent_id, key,
-                                              allocated_quotas[key])
+                    try:
+                        db.quota_allocated_update(context, parent_id, key,
+                                                  allocated_quotas[key])
+                    except exception.ProjectQuotaNotFound:
+                        parent_limit = parent_project_quotas[key]['limit']
+                        db.quota_create(context, parent_id, key, parent_limit,
+                                        allocated=allocated_quotas[key])
 
         return {'quota_set': self._get_quotas(context, target_project_id,
                                               parent_project_id=parent_id)}
@@ -396,11 +432,11 @@
         # If the project which is being deleted has allocated part of its quota
         # to its subprojects, then subprojects' quotas should be deleted first.
         for key, value in project_quotas.items():
-                if 'allocated' in project_quotas[key].keys():
-                    if project_quotas[key]['allocated'] != 0:
-                        msg = _("About to delete child projects having "
-                                "non-zero quota. This should not be performed")
-                        raise webob.exc.HTTPBadRequest(explanation=msg)
+            if 'allocated' in project_quotas[key].keys():
+                if project_quotas[key]['allocated'] != 0:
+                    msg = _("About to delete child projects having "
+                            "non-zero quota. This should not be performed")
+                    raise webob.exc.HTTPBadRequest(explanation=msg)
 
         if parent_id:
             # Get the children of the project which the token is scoped to in
